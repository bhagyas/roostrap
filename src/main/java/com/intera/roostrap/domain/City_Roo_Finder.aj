// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.intera.roostrap.domain;

import com.intera.roostrap.domain.City;
import com.intera.roostrap.domain.Country;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect City_Roo_Finder {
    
    public static Long City.countFindCitiesByCountry(Country country) {
        if (country == null) throw new IllegalArgumentException("The country argument is required");
        EntityManager em = City.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM City AS o WHERE o.country = :country", Long.class);
        q.setParameter("country", country);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<City> City.findCitiesByCountry(Country country) {
        if (country == null) throw new IllegalArgumentException("The country argument is required");
        EntityManager em = City.entityManager();
        TypedQuery<City> q = em.createQuery("SELECT o FROM City AS o WHERE o.country = :country", City.class);
        q.setParameter("country", country);
        return q;
    }
    
    public static TypedQuery<City> City.findCitiesByCountry(Country country, String sortFieldName, String sortOrder) {
        if (country == null) throw new IllegalArgumentException("The country argument is required");
        EntityManager em = City.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM City AS o WHERE o.country = :country");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<City> q = em.createQuery(queryBuilder.toString(), City.class);
        q.setParameter("country", country);
        return q;
    }
    
}
